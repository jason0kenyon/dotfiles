#+title: Doom Emacs Configuration
#+author: Jason Kenyon
#+property: header-args :tangle config.el


* Font and Modeline
#+begin_src emacs-lisp

;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Jason Kenyon"
      user-mail-address "jason0kenyon@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-variable-pitch-font (font-spec :family "SourceSansPro" :size 36 ))
(setq doom-big-font (font-spec :family "SourceCodePro" :weight 'semibold :size 46 ))
(setq doom-font (font-spec :family "SourceCodePro" :size 36 :weight 'semibold ))

(setq doom-theme 'doom-vibrant)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)
(setq doom-modeline-height 70)

#+end_src

* Be Warned
#+begin_src emacs-lisp
;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.


;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
#+end_src
* Org Mode and Roam
Setting org directory: this is where org-mode searches for keywords and scheduling, e.g,  TODO entries.
Similarly, I set the daily directory for Roam with a simple template that is generated every time I open a daily org document via Roam.
#+begin_src emacs-lisp

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
(after! org

        (setq org-directory "~/projects/org/")
        (setq org-roam-directory "~/projects/org/org-roam/")
        (setq org-agenda-files '("~/projects/org/org-roam/daily/" "~/projects/org/org-roam"))
                )

        (setq org-roam-dailies-directory "daily/")
        (setq org-roam-dailies-capture-templates
            '(("d" "default" entry
                "* %?"
                :target (file+head "%<%Y-%m-%d>.org"
                                    "#+title: %<%Y-%m-%d>\n"))))
#+end_src
* Mu4e Email Client
Configured using Doom Emacs macro `set-email-account`
Shortcuts are visble from mu4e menu and allow for easy access to specific inboxes
`mu4e-x-folder` declarations have paths relative to the maildir declared using mu initially, i.e., with `mu init`
#+begin_src emacs-lisp
(set-email-account! "jason0kenyon"
  '((mu4e-sent-folder       . "/jason0kenyon/Sent Mail")
    (mu4e-drafts-folder     . "/jason0kenyon/Drafts")
    (mu4e-trash-folder      . "/jason0kenyon/Trash")
    (mu4e-refile-folder     . "/jason0kenyon/All Mail")
    (smtpmail-smtp-user     . "jason0kenyon@gmail.com")
    (user-mail-address      . "jason0kenyon@gmail.com")    ;; only needed for mu < 1.4
    (mu4e-compose-signature . "---\nJason Kenyon"))
  t)


(after! mu4e
(setq mu4e-maildir-shortcuts
    '((:maildir "/Inbox"    :key ?i)
      (:maildir "/[Gmail]/Sent Mail" :key ?s)
      (:maildir "/[Gmail]/Trash"     :key ?t)
      (:maildir "/[Gmail]/Drafts"    :key ?d)
      (:maildir "/[Gmail]/All Mail"  :key ?a)))

  )


#+end_src

* Elfeed
#+begin_src emacs-lisp
(setq elfeed-feeds
                   '(("http://arxiv.org/rss/math.MP" Papers Physics)
                    ("http://arxiv.org/rss/math.QA" Papers QuantAlg)
                    ))
#+end_src
