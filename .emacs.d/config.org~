#+title: My Emacs Configuration
#+author: Jason Kenyon
#+property: header-args :tangle init.el


* Font and basic settings
#+begin_src emacs-lisp

;emacs auto-generated settings moved to separate file
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
;;needed for fullscreen in qtile
(setq frame-resize-pixelwise t)


;;appearance
(blink-cursor-mode 0)

(set-face-attribute 'default nil :family "SourceCodePro" :height 180)
;;(load-theme 'deeper-blue)
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
;;(setq visible-bell t)
(menu-bar-mode -1)


#+end_src

* Package repository initialization
#+begin_src emacs-lisp
;;packages
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                                ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
* M-X menu
** which key
#+begin_src emacs-lisp
(use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)

(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  ;;(doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
** Ivy
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :config
  (ivy-mode 1))
  #+end_src

** Doom modeline and preqs
#+begin_src emacs-lisp
(use-package compat)
(use-package all-the-icons)
(use-package doom-modeline)
(doom-modeline-mode 1)



#+end_src

* Keybinding
** Evilmode setup
General makes keybinding with leader keys easy
Evil collection has additional vi-like bindings that standard evil mode lacks
Splitting is defined properly
#+begin_src emacs-lisp
(use-package evil
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer mu4e))
  (evil-collection-init))

(use-package general
  :config
  (general-evil-setup t))
#+end_src
** Buffer controls
#+begin_src emacs-lisp
(nvmap :prefix "SPC"
       "b b"   '(ibuffer :which-key "Ibuffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src
** Auxiliary Bindings
#+begin_src emacs-lisp 
(general-define-key
 :keymaps '(insert)
 "jk" 'evil-normal-state)
#+end_src
** File controls
#+begin_src emacs-lisp
(use-package all-the-icons-dired)
(nvmap :prefix "SPC"
       "."     '(find-file :which-key "Find file")
       "f r"   '(counsel-recentf :which-key "Recent files")
       "f s"   '(save-buffer :which-key "Save file")
       "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
       "f C"   '(copy-file :which-key "Copy file")
       "f D"   '(delete-file :which-key "Delete file")
       "f R"   '(rename-file :which-key "Rename file")
       "f S"   '(write-file :which-key "Save file as...")
       "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src
       
** zoom
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src
* Org
** Org and roam general settings
`org-indent-mode` makes headlines and source blocks automatically indent correctly
`visual-line-mode` automatically breaks lines in buffer while viewing but doesn't actually insert a newline character
#+begin_src emacs-lisp
    ;; org stuff
    (add-hook 'org-mode-hook 'visual-line-mode)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (use-package org-roam)
    (setq org-directory "~/projects/org/")
    (setq org-roam-directory "~/projects/org/org-roam/")
    (setq org-agenda-files '("~/projects/org/org-roam/daily/" "~/projects/org/org-roam"))
    (org-roam-db-autosync-mode)
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)


    (setq org-roam-dailies-directory "daily/")
    (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
            "* %?"
            :target (file+head "%<%Y-%m-%d>.org"
                                "#+title: %<%Y-%m-%d>\n"))))
(use-package org-bullets)
(setq org-ellipsis " ▼ ")
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
** bindings
#+begin_src emacs-lisp

(nvmap :keymaps 'org-mode-map
"TAB" 'org-cycle)


    (nvmap :keymaps 'override :prefix "SPC"
           "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
           "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
           "m e"   '(org-export-dispatch :which-key "Org export dispatch")
           "m f"   '(org-footnote-new :which-key "Org footnote new")
           "m h"   '(org-toggle-heading :which-key "Org toggle heading")
           "m i"   '(org-toggle-item :which-key "Org toggle item")
           "m n"   '(org-store-link :which-key "Org store link")
           "m o"   '(org-set-property :which-key "Org set property")
           "m t"   '(org-todo :which-key "Org todo")
           "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
           "m B"   '(org-babel-tangle :which-key "Org babel tangle")
           "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
           "m T"   '(org-todo-list :which-key "Org todo list")
           "o a"   '(org-agenda :which-key "Org agenda")
           )
#+end_src
** Keywords and source block config
org-tempo allows for `<s` like expansions
#+begin_src emacs-lisp
  (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "PROJ(p)"           ; A project that contains other tasks
             "WAIT(w)"           ; Something is holding up this task
             "DONE(d)"           ; Task has been completed
              )))  ; Task has been cancelled
(require 'org-tempo)
(setq org-src-fontify-natively t
  org-src-tab-acts-natively t
  org-confirm-babel-evaluate nil
  org-edit-src-content-indentation 0)  

#+end_src

* LSP and Completion
#+begin_src emacs-lisp
(use-package lsp-mode
:init
(setq lsp-keymap-prefix "C-c l")
:hook
(lsp-mode . lsp-enable-which-key-integration)
(lsp-mode . python-mode))
(setq lsp-pyls-server-command "$HOME/.local/bin/pyls")
(use-package lsp-ui :commands lsp-ui-mode)
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src

* mail
#+begin_src emacs-lisp
(use-package mu4e
  :ensure nil
  :load-path "/usr/share/emacs/site-lisp/mu4e/"
  :config
  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/Mail")
  (setq mu4e-drafts-folder "/[Gmail/.Drafts")
  (setq mu4e-sent-folder "/[Gmail/.Sent Mail")
  (setq mu4e-refile-folder "/[Gmail/.All Mail")
  (setq mu4e-trash-folder "/[Gmail/.Trash")

  (setq mu4e-maildir-shortcuts
   '(("/Inbox" . ?i)
    ("/[Gmail].Sent Mail" . ?s)
    ("/[Gmail].All Mail" . ?a)
    ("/[Gmail].Drafts" . ?d)
    ("/[Gmail].Trash" . ?t))))



#+end_src
